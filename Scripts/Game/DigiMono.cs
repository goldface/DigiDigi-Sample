using System;
using System.Collections;
using System.Collections.Generic;
using AutoGenerated.DB;
using CodeStage.AntiCheat.ObscuredTypes;
using UnityEngine;
using DG.Tweening;
using Scripts.Common;
using Scripts.Core;
using Debug = JJFramework.Runtime.Extension.Debug;
using Random = UnityEngine.Random;

namespace Scripts.Game
{
    public class DigiMono : MonoBehaviour
    {
        private const string cTweenId = "DigiMono";
        public const int cDigiHeight = 3;

        public Transform vDigiBodyTransform;
        public SpriteRenderer vDigiSpriteRenderer;
        public SpriteRenderer vDigiHandSpriteRenderer;
        public Animator vAnimator;
        public BoxCollider2D vCollider;

        public int pBaseLayer { get; private set; }
        public int pHandLayer { get; private set; }

        private int mGrabSoundIndex;

        private int mSafeIncreaseScore;
        private int mFlowerIncreaseScore;
        private int mSafeBonusTime;
        private int mFlowerBonusTime;
        private int mSafeLoseTime;
        private int mFlowerLoseTime;
        private int mAngryLoseTime;

        private void Update()
        {
            if (mIsCatch == false && mIsCatchComplete == false && mIsCatchFail == false)
            {
                if (mWaitTime > 0f)
                {
                    mWaitTime -= Time.deltaTime;
                    if (mWaitTime <= 0f)
                    {
                        mWaitTime = 0f;
                        MoveDown(mRandomDownSpeed);
                    }
                }
            }
        }

        public void OnMouseDown()
        {
            // if (mIsMoveDown) // 이미 들가는 동작을 하면 무시한다.
            //     return;

            mStartMousePoint = Input.mousePosition;
            Catch();
        }

        public void OnMouseUp()
        {
            // if (mIsMoveDown) // 이미 들가는 동작을 하면 무시한다.
            //     return;

            App.Sound.StopEffect(mGrabSoundIndex);

            // 캐치 실패가 아니고, 캐치가 완료되지 않았을 때 미스 처리
            if (mIsCatchFail == false && mIsCatchComplete == false)
                Miss();
        }

        public void OnMouseDrag()
        {
            // if (mIsMoveDown) // 이미 들가는 동작을 하면 무시한다.
            //     return;

            if (mIsCatch && mIsCatchComplete == false)
            {
                Vector2 lCurrentMousePosition = Input.mousePosition;
                float lDiffPositionY = lCurrentMousePosition.y - mStartMousePoint.y;

                BaseDigi.eDragType lDragType = mDigi.CheckCatchAction(lDiffPositionY);
                
                switch (lDragType)
                {
                    case BaseDigi.eDragType.Success:
                        mIsCatchComplete = true;
                        if (mDigi is SafeDigi)
                        {
                            mGameTimer.AdjustGameTime(mSafeBonusTime);
                            mScoreManager.IncreaseSafeScore(mSafeIncreaseScore);
                        }
                        else if (mDigi is FlowerDigi)
                        {
                            mGameTimer.AdjustGameTime(mFlowerBonusTime);
                            mScoreManager.IncreaseFlowerScore(mFlowerIncreaseScore);
                        }
                        else
                            Debug.LogWarning("Something has wrong!");

                        CatchReaction();
                        break;
                    case BaseDigi.eDragType.Fail:
                        mIsCatchComplete = true;
                        if (mDigi is SafeDigi)
                        {
                            mGameTimer.AdjustGameTime(mSafeLoseTime);
                            mScoreManager.FailedSafeDigi(1);
                        }
                        else if (mDigi is FlowerDigi)
                        {
                            mGameTimer.AdjustGameTime(mFlowerLoseTime);
                            mScoreManager.FailedFlowerDigi(1);
                        }
                        else
                        {
                            mGameTimer.AdjustGameTime(mAngryLoseTime);
                            mScoreManager.FailedAngryDigi(1);
                        }

                        CatchFailReaction();
                        break;
                    case BaseDigi.eDragType.None:
                        break;
                }
            }
        }

        public virtual void Init(DigiHole aDigiHole, BaseDigi.eDigiType aDigiType, ScoreManager aScoreManager, GameTimer aGameTimer, Vector3 aHolePosition)
        {
            transform.position = aHolePosition;
        
            mDigiHole = aDigiHole;
            SetVisible(false);
            mWaitTime = 0f;
            mIsCatch = false;
            mIsCatchFail = false;
            //mIsMoveDown = false;

            mScoreManager = aScoreManager;
            mGameTimer = aGameTimer;
            
            pBaseLayer = vAnimator.GetLayerIndex("Base Layer");
            pHandLayer = vAnimator.GetLayerIndex("Hand Layer");

            mSafeIncreaseScore = App.db.Char[(int)BaseDigi.eDigiType.Safe].score;
            mFlowerIncreaseScore = App.db.Char[(int)BaseDigi.eDigiType.Flower].score;
            
            mSafeBonusTime = App.db.Char[(int)BaseDigi.eDigiType.Safe].bonus_time;
            mFlowerBonusTime = App.db.Char[(int)BaseDigi.eDigiType.Flower].bonus_time;
            
            mSafeLoseTime = -App.db.Char[(int)BaseDigi.eDigiType.Safe].lose_time;
            mFlowerLoseTime = -App.db.Char[(int)BaseDigi.eDigiType.Flower].lose_time;
            mAngryLoseTime = -App.db.Char[(int)BaseDigi.eDigiType.Angry].lose_time;
        }

        public void Reset()
        {
            //mDigi = null;
            vDigiBodyTransform.DOKill();
            mWaitTime = 0f;
            mIsCatch = false;
            mIsCatchFail = false;
            //mIsMoveDown = false;
            mStartMousePoint = Vector2.zero;
            SetVisible(false);
            VisibleDigiHand(false);
            mDigiHole.pUse = false;
        }

        public void Spawn(IDigi aDigi, Stage.Define aStageData, Vector3 aHolePosition)
        {
            SetPosition(aHolePosition);
            ChangeDigi(aDigi);
            UpdateAnimation("");
            SetVisible(true);
            UpdateDigiHand();
            VisibleDigiHand(true);

            float lRandomComeSpeed = Random.Range(aStageData.come_spd_min / 1000f, aStageData.come_spd_max / 1000f);
            MoveUp(lRandomComeSpeed);

            float lRandomDownSpeed = Random.Range(aStageData.out_min / 1000f, aStageData.out_max / 1000f);
            mRandomDownSpeed = lRandomDownSpeed;
            
            float lRandomWaitTime = Random.Range(aStageData.wait_min / 1000f, aStageData.wait_max / 1000f);
            SetWaitTime(lRandomWaitTime);
            Ready();
        }

        public void ChangeDigi(IDigi aDigi)
        {
            mDigi = aDigi;
            mDigi.SetDigiMono(this);
        }

        public string GetTweenId()
        {
            return cTweenId + mDigiHole.pNumber;
        }

        public void SetPosition(Vector3 aHolePosition)
        {
            //transform.position = aHolePosition;

            Vector3 lDigiPosition = aHolePosition; //vDigiBodyTransform.position;
            lDigiPosition.y = aHolePosition.y - cDigiHeight;
            vDigiBodyTransform.position = lDigiPosition;

            Debug.Log($"HoleNumber:{mDigiHole.pNumber}, SetPosition={vDigiBodyTransform.position}");
        }

        public void SetVisible(bool aIsVisible)
        {
            vDigiSpriteRenderer.enabled = aIsVisible;
            VisibleDigiHand(aIsVisible);
            vCollider.enabled = aIsVisible;
        }

        public void SetLayerOrder(int aOrder)
        {
            vDigiSpriteRenderer.sortingOrder = aOrder;
        }

        public virtual void UpdateAnimation(string aAnimationName)
        {
            string lAnimationName = mDigi.UpdateAnimationName(aAnimationName);
            vAnimator.Play(lAnimationName);
        }

        public void UpdateDigiHand()
        {
            mDigi.UpdateDigiHand();
        }

        public void SetWaitTime(float aWaitTime)
        {
            mWaitTime = aWaitTime;
        }

        public void Ready()
        {
            mIsCatchComplete = false;
        }

        public void VisibleDigiHand(bool aIsVisible)
        {
            vDigiHandSpriteRenderer.enabled = aIsVisible;
        }

        public void MoveUp(float aSpeedValue)
        {
            MoveUpAnimation(aSpeedValue);
        }

        public void MoveDown(float aSpeedValue)
        {
            //mIsMoveDown = true;
            MoveDownAnimation(aSpeedValue);
        }

        public void MoveUpAnimation(float aSpeedValue)
        {
            Debug.Log($"MoveUp Animation, HoleNumber:{mDigiHole.pNumber}");
            vDigiBodyTransform.DOMoveY(cDigiHeight, aSpeedValue)
                .SetRelative()
                .SetId(GetTweenId());
        }

        public void MoveDownAnimation(float aSpeedValue)
        {
            Debug.Log($"MoveDown Animation, HoleNumber:{mDigiHole.pNumber}");
            vDigiBodyTransform.DOMoveY(-cDigiHeight, aSpeedValue).SetRelative()
                .OnComplete(OnMoveDownAnimationComplete)
                .SetId(GetTweenId());
        }

        public void OnMoveDownAnimationComplete()
        {
            Debug.Log($"MoveDown Complete, HoleNumber:{mDigiHole.pNumber}");
            _OnReactionComplete();
        }

        public void Catch()
        {
            Debug.Log($"Catch, HoleNumber:{mDigiHole.pNumber}");
            mIsCatch = true;
            VisibleDigiHand(false);
            UpdateAnimation("Press");

            mGrabSoundIndex = App.Sound.PlaySingle("Sounds/sound_grab.mp3", true);
        }

        public void Miss()
        {
            Debug.Log($"Miss, HoleNumber:{mDigiHole.pNumber}");
            mIsCatch = false;
            VisibleDigiHand(true);
            UpdateAnimation("");

            var lRandomValue = UnityEngine.Random.Range(1, 3);
            App.Sound.PlaySingle($"Sounds/slime{lRandomValue}.mp3");
        }

        public void CatchReaction()
        {
            Debug.Log($"Catch Reaction, HoleNumber:{mDigiHole.pNumber}");
            VisibleDigiHand(false);
            mDigi.CatchReaction(_OnReactionComplete);
        }

        public void CatchFailReaction()
        {
            Debug.Log($"CatchFail Reaction, HoleNumber:{mDigiHole.pNumber}");
            VisibleDigiHand(false);
            mIsCatchFail = true;
            mDigi.CatchFailReaction(_OnReactionComplete);
        }

        private void _OnReactionComplete()
        {
            Debug.Log($"_OnReactionComplete, HoleNumber:{mDigiHole.pNumber}");

            var lSequence = DOTween.Sequence()
                .AppendInterval(0.1f) // 잡거나, 못잡았을 때 나오는 리액션이 끝나고 0.1초 후 리셋시킨다.
                .OnComplete(Reset)
                .SetAutoKill(true);
            lSequence.Play();
        }

        private IDigi mDigi;
        private DigiHole mDigiHole;
        private ScoreManager mScoreManager;
        private GameTimer mGameTimer;

        private ObscuredFloat mWaitTime;
        private ObscuredBool mIsCatch;
        private ObscuredBool mIsCatchFail;
        private ObscuredBool mIsCatchComplete;
        //private ObscuredBool mIsMoveDown;

        private Vector2 mStartMousePoint;
        private float mRandomDownSpeed;
    }
}
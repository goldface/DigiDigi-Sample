using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using AutoGenerated.DB;
using CodeStage.AntiCheat.ObscuredTypes;
using Scripts.Common;
using Scripts.Core;
using UniRx;
using Unity.Mathematics;
using Debug = JJFramework.Runtime.Extension.Debug;
using Random = UnityEngine.Random;

namespace Scripts.Game
{
    [DisallowMultipleComponent]
    public class GameLevelManager : MonoBehaviour
    {
        private void Update()
        {
            if (mGameTimer != null)
            {
                if (mGameTimer.pElapseTime >= App.db.Stage[mPhaseLevel].playtime)
                {
                    mPhaseLevel = math.clamp(mPhaseLevel + 1,
                        App.db.CommonDefine[AppDefine.GAME_PHASE].type,
                        App.db.CommonDefine[AppDefine.GAME_PHASE].typeInt);

                    if (mPrevPhaseLevel != mPhaseLevel)
                    {
                        App.Sound.PlaySingle("Sounds/sound_level_up.mp3");
                        mPrevPhaseLevel = mPhaseLevel;
                        
                        mOnPhaseShift?.Invoke(mPhaseLevel);
                    }
                }

                mSpawnSpeedTier = mGameTimer.pElapseTime / 10;
                mSpawnSpeedTier = Mathf.Clamp(mSpawnSpeedTier, 0f, 5f);
            }
        }

        public void SetGameTimer(GameTimer aGameTimer)
        {
            mGameTimer = aGameTimer;
        }

        public void SetScoreManager(ScoreManager aScoreManager)
        {
            mScoreManager = aScoreManager;
        }

        // public float GetSpawnSpeedTime()
        // {
        //     //y=-(2^(x-5))+1
        //     float result = (-Mathf.Pow(2f, mSpawnSpeedTier - 5f)) + 1f;
        //     //Debug.Log($"SpeedTime:{result}, {mSpawnSpeedTier}");
        //     return result;
        // }

        public float GetSpawnSpeedTime()
        {
            float lRandSpeedUpValue = 0f;
            if (mScoreManager.pIsDecreaseScore == false)
            {
                lRandSpeedUpValue = Random.Range(App.db.Stage[mPhaseLevel].spd_up_min * 1f, App.db.Stage[mPhaseLevel].spd_up_max * 1f);
            }

            float lSpawnSpeedMin = (App.db.Stage[mPhaseLevel].spawn_time_min / 1000f) - lRandSpeedUpValue;
            float lSpawnSpeedMax = (App.db.Stage[mPhaseLevel].spawn_time_max / 1000f) - lRandSpeedUpValue;
            float lRandomValue = Random.Range(Mathf.Clamp(lSpawnSpeedMin, 0, lSpawnSpeedMin), Mathf.Clamp(lSpawnSpeedMax, 0, lSpawnSpeedMax));
            Debug.Log($"{App.db.Stage[mPhaseLevel].spawn_time_min},{App.db.Stage[mPhaseLevel].spawn_time_max},{lRandomValue}" );
            return lRandomValue;
        }

        public Stage.Define GetCurrentStageData()
        {
            return GetStageData(mPhaseLevel);
        }

        public Stage.Define GetStageData(int aPhaseLevel)
        {
            Stage.Define lStageData;
            if (App.db.Stage.TryGetValue(aPhaseLevel, out lStageData))
                return lStageData;

            // 해당 페이즈레벨이 존재하지 않을경우 데이터의 맨 마지막 페이즈를 사용한다.
            return App.db.Stage.Values.Last();
        }
        
        public void SetPhaseShift(Action<int> aAction)
        {
            mOnPhaseShift = aAction;
            mOnPhaseShift.Invoke(mPhaseLevel);
        }

        private void OnDestroy()
        {
            mOnPhaseShift = null;
        }

        // private void OnGUI()
        // {
        //     GUI.Label(new Rect(50, 50, 1000, 100), $"<color=green><size=50>{(mGameTimer.pElapseTime)}</size></color>");
        //     GUI.Label(new Rect(50, 150, 1000, 100), $"<color=green><size=50>{mElapseTime.ToString()}</size></color>");
        //     GUI.Label(new Rect(50, 250, 1000, 100), $"<color=green><size=50>{mSpawnSpeedTier}</size></color>");
        //     GUI.Label(new Rect(50, 350, 1000, 100), $"<color=green><size=50>{mPhaseLevel}</size></color>");
        // }

        public ObscuredBool pIsCleared =>
            mPhaseLevel == App.db.CommonDefine[AppDefine.GAME_PHASE].typeInt
            && mGameTimer.pIsStopTimer;

        private GameTimer mGameTimer;
        private ScoreManager mScoreManager;
        private ObscuredFloat mSpawnSpeedTier = 0f;
        private ObscuredInt mPhaseLevel = 1;
        private ObscuredInt mPrevPhaseLevel = 1;
        private float mElapseTime = 0f;

        private System.Action<int> mOnPhaseShift;
    }
}
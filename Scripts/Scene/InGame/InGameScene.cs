using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using AutoGenerated.DB;
using CodeStage.AntiCheat.ObscuredTypes;
using CodeStage.AntiCheat.Storage;
using DG.Tweening;
using JJFramework.Runtime.Extension;
using Scripts.Core;
using Scripts.Game;
using Scripts.UI;
using UniRx;
using UnityEngine.SceneManagement;
using UnityEngine.SocialPlatforms.Impl;
using Debug = JJFramework.Runtime.Extension.Debug;
using Random = UnityEngine.Random;

namespace Scripts.Scene.InGame
{
    [DisallowMultipleComponent]
    public class InGameScene : MonoBehaviour
    {
        private const int cDigiHoleCount = 5;

        public static InGameScene sMain { get; private set; }

        public ObscuredInt vGamePlayTime = 60;
        public ReadyGo vReadyGo;

        private CountPool mTimePool;
        private CountPool mScorePool;

        [SerializeField] private CountObject vTimeObject;
        [SerializeField] private CountObject vScoreObject;
        [SerializeField] private RectTransform vTimeParent;
        [SerializeField] private RectTransform vScoreParent;
        [SerializeField] private Tutorial vTutorialCanvas;
        [SerializeField] private CanvasGroup vFade;
        [SerializeField] private RectTransform vEndingCurtain;
        [SerializeField] private PanelContinue vPanelContinue;
        [SerializeField] private InGamePhase vInGamePhase;

        private void Awake()
        {
            Debug.Log("InGameScene Awake");

            App.Initialize();

            vFade.alpha = 1f;
            
            vPanelContinue.SetActive(false);

            sMain = this;
            mDigiHoleManager = GameObject.Find("DigiHoleManager").GetComponent<DigiHoleManager>();

            mScoreManager = GameObject.Find("ScoreManager").GetComponent<ScoreManager>();
            mGameTimer = GameObject.Find("GameTimer").GetComponent<GameTimer>();
            mGameLevelManager = GameObject.Find("GameLevelManager").GetComponent<GameLevelManager>();
            mGameLevelManager.SetGameTimer(mGameTimer);
            mGameLevelManager.SetScoreManager(mScoreManager);
            mGameLevelManager.SetPhaseShift(vInGamePhase.SetPhase);
            
            mTimePool = new CountPool(vTimeObject.gameObject, vTimeParent);
            mScorePool = new CountPool(vScoreObject.gameObject, vScoreParent);

            mDigiMonoArray = new DigiMono[cDigiHoleCount];
        }

        private IEnumerator Start()
        {
            Debug.Log("InGameScene Start");

            var tween = vFade.DOFade(0f, 1f);

            while (false == App.Bundle.IsLoaded)
            {
                yield return null;
            }

            Debug.Log("App.Bundle is Loaded");

            App.Sound.PreloadEffects("BGM/play_bgm_first.mp3", "BGM/play_bgm_loop.mp3");
            App.Sound.PlayBGM("BGM/play_bgm_first.mp3", false);
            Observable.Timer(TimeSpan.FromSeconds(3.9))
                .Subscribe(_ => { App.Sound.PlayBGM("BGM/play_bgm_loop.mp3"); })
                .AddTo(this);

            mDigiHoleManager.Init();
            Debug.Log("DigiHoleManager is Loaded");

            mGameTimer.Init();
            mGameTimer.AddGamePlayTimeFinishEvent(_OnGameFinish);
            mGameTimer.SetGameAdjustTimeAction(_SpawnTimeObject);
            Debug.Log("GameTimer is Loaded");

            mScoreManager.SetScoreAction(_SpawnScoreObject);
            Debug.Log("ScoreManager is Loaded");

            var lDigiMonoOrigin = App.Bundle.Load<GameObject>("InGameAsset", "DigiMono.prefab");
            var lDigiMonoPrefab = lDigiMonoOrigin.GetComponent<DigiMono>();
            for (int iDigi = 0; iDigi < mDigiMonoArray.Length; ++iDigi)
            {
                mDigiMonoArray[iDigi] = Instantiate(lDigiMonoPrefab);
                Vector3 lHolePosition = mDigiHoleManager.GetHolePosition(iDigi);
                mDigiMonoArray[iDigi].Init(mDigiHoleManager.GetDigiHole(iDigi), BaseDigi.eDigiType.None, mScoreManager, mGameTimer, lHolePosition);
                mDigiMonoArray[iDigi].SetLayerOrder(DigiHoleManager.cDefaultHoleOrder + (iDigi + 1));
                //mDigiMonoArray[iDigi].SetPosition(lHolePosition);
                
            }

            Debug.Log("Digi/Hole is Loaded");

            var lTutorialState = PlayerPrefs.GetInt("TUTORIAL_STATE", 0);
            if (lTutorialState == 0)
            {
                Debug.Log($"vTutorialCanvas: {vTutorialCanvas != null}");
                vTutorialCanvas.OpenTutorial(StartGame);
                PlayerPrefs.SetInt("TUTORIAL_STATE", 1);
            }
            else
            {
                StartGame();
            }
        }

        private void OnDestroy()
        {
            if (sMain == this)
                sMain = null;

            mGameTimer?.Destroy();
        }

        private void _SpawnTimeObject(int aTimeValue)
        {
            var obj = mTimePool.Rent();
            obj.Initialize(aTimeValue, d => mTimePool.Return(d));
        }
        
        private void _SpawnScoreObject(int aValue)
        {
            var obj = mScorePool.Rent();
            obj.Initialize(aValue, d => mScorePool.Return(d));
        }

        public void StartGame()
        {
            mGameTimer.SetGameTime(vGamePlayTime);
            vReadyGo.StartSequence(_OnStartCallback);
        }

        public void PauseGame()
        {
            mGameTimer.StopGameTimer();
            if (mCoUpdate != null)
            {
                StopCoroutine(mCoUpdate);
            }
        }

        public void ContinueGame()
        {
            vPanelContinue.SetActive(false);
            mGameTimer.SetGameTime(30);
            ResumeGame();
        }

        public void ResumeGame()
        {
            mGameTimer.StartGameTimer();
            mCoUpdate = StartCoroutine(_CoUpdate());
        }

        private IEnumerator _CoUpdate()
        {
            for (;;)
            {
                //yield return new WaitForSeconds(Random.Range(0.1f, 0.5f));
                yield return new WaitForSeconds(mGameLevelManager.GetSpawnSpeedTime());
                _GenerateDigiSpawn();
            }
        }

        private void _OnStartCallback()
        {
            Debug.Log("InGameScene _OnStartCallback");
            mGameTimer.StartGameTimer();
            mCoUpdate = StartCoroutine(_CoUpdate());
        }

        private void _GenerateDigiSpawn()
        {
            for (;;)
            {
                if (mDigiHoleManager.CheckDigiHoleIsFull())
                    break;

                Stage.Define lCurrentStageData = mGameLevelManager.GetCurrentStageData();
                if (mDigiHoleManager.GetAppearHoleCount() >= lCurrentStageData.apper_max)
                    break;
                
                DigiHole lDigiHole = mDigiHoleManager.GenerateEmptyHole();
                int lHoleNumber = lDigiHole.pNumber;
                Debug.Log($"GenerateDigi, HoleNumber:{lHoleNumber}");

                Vector3 lHolePosition = mDigiHoleManager.GetHolePosition(lHoleNumber);
                IDigi lDigi = DigiFactory.CreateRandomDigi(lCurrentStageData.phase);
                mDigiMonoArray[lHoleNumber].Spawn(lDigi, lCurrentStageData, lHolePosition);
                lDigiHole.pUse = true;
                break;
            }
        }

        private void _OnGameFinish()
        {
            Debug.Log("OnGameFinish");
            PauseGame();
            InGameScoreContext.pIsCleared = mGameLevelManager.pIsCleared;
            InGameScoreContext.pScore = mScoreManager.GetScore();
            InGameScoreContext.pSafeSuccessScore = mScoreManager.GetSafeSuccess();
            InGameScoreContext.pSafeFailCount = mScoreManager.GetSafeFail();
            InGameScoreContext.pFlowerSuccessScore = mScoreManager.GetFlowerSuccess();
            InGameScoreContext.pFlowerFailCount = mScoreManager.GetFlowerFail();
            InGameScoreContext.pAngryFailCount = mScoreManager.GetAngryFail();

            vEndingCurtain.SetActive(true);
            var prevCurtainPos = vEndingCurtain.anchoredPosition;
            vEndingCurtain.DOAnchorPosY(0f, 2f)
                .OnComplete(() =>
                {
                    if (InGameScoreContext.pIsCleared)
                    {
                        SceneManager.LoadScene("ResultScene");
                    }
                    else
                    {
                        var isContinued = ObscuredPrefs.GetBool("IS_CONTINUED");
                        if (!isContinued)
                        {
                            vPanelContinue.SetActive(true);
                            vPanelContinue.EndingSequence();
                            vEndingCurtain.anchoredPosition = prevCurtainPos;
                        }
                        else
                        {
                            SceneManager.LoadScene("ResultScene");
                        }
                    }
                });
        }

        private DigiHoleManager mDigiHoleManager;
        private ScoreManager mScoreManager;
        private GameTimer mGameTimer;
        private GameLevelManager mGameLevelManager;
        private DigiMono[] mDigiMonoArray;

        private Coroutine mCoUpdate;
    }
}